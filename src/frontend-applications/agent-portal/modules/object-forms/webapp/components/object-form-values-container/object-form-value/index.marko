<!--
Copyright (C) 2006-2022 c.a.p.e. IT GmbH, https://www.cape-it.de
--
This software comes with ABSOLUTELY NO WARRANTY. For details, see
the enclosed file LICENSE for license information (GPL3). If you
did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
--
-->

<if(state.prepared)>
   <div.mt-2.mb-2>

      <if(state.enabled)>
         <if(state.visible)>
            <div.input-group>

               <div.col-11.col-sm-2.d-flex.p-0>
                  <span.object-forms-component.flex-fill.input-group-text.min-w-0.p-0.ps-2.pe-2.rounded-0.rounded-start class={
                     border: !state.valid,
                     'bg-danger': !state.valid,
                     'text-white': !state.valid,
                     'border-danger': !state.valid,
                     'rounded-left"': !state.valid,
                     'border-end-0': state.hint,
                     'border-end-1': !state.hint
                  }
                  title=state.label>
                  <span.text-truncate>${state.label}</span>
                     <if(state.required)>*</if>
                  </span>

                  <if(state.hint)>
                     <span.object-forms-component.input-group-text.hint-wrapper.rounded-0.border-start-0>
                        <overlay-icon isHint=true content=state.hint title=state.label/>
                     </span>
                  </if>
               </div>

               <div.col-11.col-sm-9.p-0 class={
                  border: !state.valid,
                  'border-danger': !state.valid,
                  'text-danger': !state.valid,
                  'rounded': !state.valid
               }>
                  <if(state.inputTemplate)>
                        <${state.inputTemplate} formValue=state.formValue/>
                  </if>
                  <else>
                     <text-form-input formVaue=state.formValue/>
                  </else>
               </div>
               <div.col-1.col-sm-1.p-0.ps-2>
                  <if(!state.formValue.readonly)>
                     <if(state.canAdd)>
                        <button.btn.btn-outline-secondary.me-1 type="button" on-click("addValue")><i.fas.fa-plus-circle/></button>
                     </if>
                     <if(state.canRemove)>
                        <button.btn.btn-outline-secondary type="button" on-click("removeValue")><i.fas.fa-minus-circle/></button>
                     </if>
                  </if>
               </div>
            </div>
            <if(!state.formValue.readonly && Array.isArray(state.formValue.actions) && state.formValue.actions.length > 0)>
               <div.input-group>
                  <div.col-11.col-sm-2.d-flex.p-0></div>
                  <div.col-11.col-sm-9.p-0>
                     <actions-container actions=state.formValue.actions isSelectInput=state.formValue.inputComponentId === "select-form-input"/>
                  </div>
               </div>
            </if>
            <if(state.validationErrors.length)>
               <div.col-sm-10.offset-sm-2.validation-errors>
                  <for|validationError| of=state.validationErrors>
                     <span.text-danger>
                        ${validationError.message}
                     </span>
                  </for>
               </div>
            </if>
         </if>

         <if(Array.isArray(state.formValues) && state.formValues.length)>
            <div class={
               "ps-2": !state.formValue.isCountHandler && state.formValue.visible,
               "ms-4": !state.formValue.isCountHandler && state.formValue.visible,
               "border-start": !state.formValue.isCountHandler && state.formValue.visible
            }>
               <object-form-values-container formValues=state.formValues parent=state.formValue/>
            </div>
         </if>
      </if>
   </div>
</if>
