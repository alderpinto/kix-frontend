<!--
Copyright (C) 2006-2021 c.a.p.e. IT GmbH, https://www.cape-it.de
--
This software comes with ABSOLUTELY NO WARRANTY. For details, see
the enclosed file LICENSE for license information (GPL3). If you
did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
--
-->
<div.widget-bar>
    <if(state.isContextCustomizable)>
        <div.bar-icon.configuration-mode
            on-click("toggleConfigurationMode")
            title=state.translations["Translatable#Configuration Mode"]>
            <span.kix-icon-gear/>
        </div>
    </if>
    <if(Array.isArray(state.sidebars) && state.sidebars.length)>
        <div.bar-icon.sidebar-toggle
            class={
                "sidebars-shown": component.areSidebarsShown()
            }
            on-click("toggleAllSidebars")
            title=(
                component.areSidebarsShown()
                    ? state.translations["Translatable#Close Sidebars"]
                    : state.translations["Translatable#Open Sidebars"]
            )>
            <div>
                <span class=(
                    component.areSidebarsShown()
                        ? "kix-icon-all-close"
                        : "kix-icon-all-open"
                )/>
            </div>
        </div>
    </if>
    <for|sidebar| of=state.sidebars>
        <if(sidebar.configuration)>
            <div.bar-icon
                class={
                    "select-active": component.isShown(sidebar)
                }
                on-click("toggleSidebar", sidebar.instanceId)
                title=state.translations[sidebar.configuration.title]
                key=("sidebarmenu-" + sidebar.instanceId)>
                <span class=sidebar.configuration.icon/>
            </div>
        </if>
    </for>
</div>
