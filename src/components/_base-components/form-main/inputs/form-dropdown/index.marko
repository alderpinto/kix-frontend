<div.dropdown dropDownId=state.dropdownId on-click('setKeepExpanded')>
    <div.dropdown-input-container class={"list-shown": state.expanded}>
        <input.input-style class={invalid: state.invalid} type="text" readonly=(!state.enabled) disabled=(!state.enabled)
            placeholder=(state.selectedItem ? "" : input.placeholder) value=state.filterValue on-keydown('keyDown')
            on-keyup('filterValueChanged') required=input.required on-click('toggleList', false)
            on-focus('toggleList', false) on-blur('focusLost') key="dropdown-input"/>
        <if(state.selectedItem)>
            <span.selected-item-container on-click('toggleList', false)>
                <div.selected-item>
                    <icon icon=state.selectedItem.icon showUnknown=true/>
                    <span.item-text>${state.selectedItem.label}</span>
                    <if(state.selectedItem.secondaryIcon)>
                        <icon icon=state.selectedItem.secondaryIcon showUnknown=true/>
                    </if>
                    <span.kix-icon-close on-click('removeSelectedItem')/>
                </div>
            </span>
        </if>
        <span.dropdown-button.kix-icon-sort-down on-click('dropdownClicked')/>
    </div>
    <if(state.expanded)>
        <ul.dropdown-list style=state.dropdownListStyle>
            <for(item in state.filteredItems)>
                <li.dropdown-item id=((state.dropdownId + "-item-") + item.id) on-click('itemSelected', item)
                    on-mousemove('itemHovered', item) class=(component.isSelected(item) ? "active" : "")>
                    <icon icon=item.icon showUnknown=true/>
                    ${item.label}
                    <if(item.secondaryIcon)>
                        <icon icon=item.secondaryIcon showUnknown=true/>
                    </if>
                </li>
            </for>
        </ul>
    </if>
</div>
